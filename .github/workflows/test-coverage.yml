name: Test Coverage Report
on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master, develop ]
  workflow_dispatch:

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.0.x
    
    - name: Restore dependencies
      run: |
        dotnet restore
        dotnet restore ./Tests/CoreAPI.UnitTests/CoreAPI.UnitTests.csproj
    
    - name: Build
      run: dotnet build --no-restore
      
    - name: Build test project
      run: dotnet build ./Tests/CoreAPI.UnitTests/CoreAPI.UnitTests.csproj -p:BuildProjectReferences=true
    
    - name: Test with coverage
      run: |
        mkdir -p ./TestResults
        dotnet test ./Tests/CoreAPI.UnitTests/CoreAPI.UnitTests.csproj --verbosity normal \
          /p:CollectCoverage=true \
          /p:CoverletOutputFormat=cobertura \
          /p:CoverletOutput="./TestResults/coverage.cobertura.xml" \
          --collect:"XPlat Code Coverage" \
          --results-directory:"./TestResults/"
        
    - name: List coverage files
      run: |
        echo "Checking for coverage files..."
        mkdir -p ./TestResults
        find ./TestResults -type f | sort
        
        if [ -z "$(find ./TestResults -name "*.xml" -o -name "*.json" 2>/dev/null)" ]; then
          echo "Warning: No coverage files found. Check test configuration."
        else
          echo "Coverage files found successfully."
        fi
    
    - name: Install ReportGenerator
      run: dotnet tool install -g dotnet-reportgenerator-globaltool
    
    - name: Generate HTML coverage report
      run: |
        mkdir -p ./TestResults
        
        COVERAGE_FILES=$(find ./TestResults -name "*.cobertura.xml" -o -name "coverage.xml" -o -name "*.opencover.xml" 2>/dev/null)
        
        if [ -z "$COVERAGE_FILES" ]; then
          echo "Warning: No coverage XML files found. Will try with a broader search pattern."
          COVERAGE_FILES=$(find ./TestResults -name "*.xml" 2>/dev/null)
        fi
        
        if [ -z "$COVERAGE_FILES" ]; then
          echo "Warning: No coverage XML files found at all. Creating an empty report directory."
          mkdir -p "./TestResults/CoverageReport"
          echo "No coverage data available" > "./TestResults/CoverageReport/no-coverage.txt"
        else
          echo "Found coverage files: $COVERAGE_FILES"
          
          reportgenerator \
            -reports:"$COVERAGE_FILES" \
            -targetdir:"./TestResults/CoverageReport" \
            -reporttypes:"Html;HtmlSummary;Cobertura"
        fi
    
    - name: Organize reports by date
      run: |
        YEAR=$(date +"%Y")
        MONTH=$(date +"%m")
        DAY=$(date +"%d")
        BRANCH_NAME=${GITHUB_REF#refs/heads/}
        if [[ "$GITHUB_EVENT_NAME" == "pull_request" ]]; then
          BRANCH_NAME="pr-${GITHUB_HEAD_REF}"
        fi
        
        REPORT_DIR="./Reports/$BRANCH_NAME/$YEAR/$MONTH/$DAY"
        
        if [ -d "$REPORT_DIR" ]; then
          echo "Removing existing reports for $YEAR/$MONTH/$DAY"
          rm -rf "$REPORT_DIR"
        fi
        
        mkdir -p "$REPORT_DIR"
        
        echo "Copying coverage files to $REPORT_DIR"
        find ./TestResults -name "*.xml" -o -name "*.json" 2>/dev/null | xargs -I{} cp {} "$REPORT_DIR/" 2>/dev/null || true
        
        if [ -d "./TestResults/CoverageReport" ]; then
          echo "Copying HTML reports to $REPORT_DIR/html"
          mkdir -p "$REPORT_DIR/html"
          cp -r ./TestResults/CoverageReport/* "$REPORT_DIR/html/" 2>/dev/null || true
        else
          mkdir -p "$REPORT_DIR/html"
          echo "No coverage data available" > "$REPORT_DIR/html/no-coverage.txt"
        fi
        
        echo "{
        \"branch\": \"$BRANCH_NAME\",
        \"date\": \"$(date -u +"%Y-%m-%dT%H:%M:%SZ")\",
        \"commit\": \"$GITHUB_SHA\",
        \"workflow_run\": \"$GITHUB_RUN_ID\"
        }" > "$REPORT_DIR/metadata.json"
        
        echo "Reports organized at: $REPORT_DIR"
        find "$REPORT_DIR" -type f | sort 2>/dev/null || echo "No files found in $REPORT_DIR"
    
    - name: Archive coverage reports
      uses: actions/upload-artifact@v4
      with:
        name: coverage-reports
        path: ./Reports
        retention-days: 90
