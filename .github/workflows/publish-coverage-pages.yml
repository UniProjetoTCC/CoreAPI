name: Publish Coverage Reports to GitHub Pages

on:
  workflow_run:
    workflows: ["Test Coverage Report"]
    types:
      - completed

permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment
concurrency:
  group: "pages"
  cancel-in-progress: true

jobs:
  publish:
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Pages
        uses: actions/configure-pages@v4
      
      - name: Download coverage artifact
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const { owner, repo } = context.repo;
            const run_id = ${{ github.event.workflow_run.id }};
            
            const artifacts = await github.rest.actions.listWorkflowRunArtifacts({
              owner,
              repo,
              run_id
            });
            
            const coverageArtifact = artifacts.data.artifacts.find(
              artifact => artifact.name === "coverage-reports"
            );
            
            if (!coverageArtifact) {
              console.log("Could not find coverage-reports artifact");
              process.exit(1);
            }
            
            const download = await github.rest.actions.downloadArtifact({
              owner,
              repo,
              artifact_id: coverageArtifact.id,
              archive_format: 'zip'
            });
            
            fs.writeFileSync('coverage-reports.zip', Buffer.from(download.data));
            console.log('Coverage artifact downloaded');
      
      - name: Setup static files
        run: |
          mkdir -p _site
          touch _site/.nojekyll
      
      - name: Extract Reports and Generate Index Page
        run: |
          set -e
          unzip -o coverage-reports.zip -d temp_coverage
          
          REPORTS=$(find temp_coverage -type d -path "*/html" | sort -r)
          
          if [ -n "$REPORTS" ]; then
            echo "Coverage reports found. Generating index page."
            cp -r temp_coverage/* _site/
            
            cat > _site/index.html << 'EOF'
          <!DOCTYPE html>
          <html lang="pt-BR">
          <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>CoreAPI - Relatórios de Cobertura de Código</title>
            <style>
              :root {
                --bg-color: #1a1a1a; --card-bg: #2a2a2a; --text-color: #e0e0e0;
                --primary-color: #4a90e2; --secondary-color: #50e3c2;
                --border-color: #444; --header-bg: #222;
              }
              body {
                font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif;
                background-color: var(--bg-color); color: var(--text-color);
                margin: 0; padding: 2rem; line-height: 1.6;
              }
              .container { max-width: 900px; margin: 0 auto; }
              .header {
                background-color: var(--header-bg); padding: 2rem; border-radius: 12px;
                text-align: center; margin-bottom: 2rem; border: 1px solid var(--border-color);
              }
              .header h1 { margin: 0 0 0.5rem 0; color: var(--secondary-color); }
              .tabs { display: flex; margin-bottom: 1.5rem; border-bottom: 1px solid var(--border-color); }
              .tab-button {
                background: none; border: none; color: var(--text-color);
                padding: 1rem 1.5rem; font-size: 1rem; cursor: pointer;
                border-bottom: 3px solid transparent; transition: all 0.3s ease;
              }
              .tab-button:hover { background-color: var(--card-bg); }
              .tab-button.active { border-bottom-color: var(--primary-color); color: var(--primary-color); }
              .tab-content { display: none; }
              .tab-content.active { display: block; }
              .card {
                background-color: var(--card-bg); border-radius: 12px; padding: 1.5rem;
                margin-bottom: 1rem; border: 1px solid var(--border-color);
                transition: transform 0.2s ease, box-shadow 0.2s ease;
              }
              .card:hover { transform: translateY(-5px); box-shadow: 0 8px 20px rgba(0,0,0,0.3); }
              .card-title { margin-top: 0; }
              .buttons { margin-top: 1.5rem; display: flex; gap: 1rem; }
              .btn {
                text-decoration: none; padding: 0.75rem 1.5rem; border-radius: 8px;
                font-weight: bold; transition: all 0.3s ease; display: inline-block; text-align: center;
              }
              .btn-primary { background-color: var(--primary-color); color: white; }
              .btn-primary:hover { background-color: #5aa1f2; }
              .btn-outline-secondary { border: 1px solid var(--secondary-color); color: var(--secondary-color); }
              .btn-outline-secondary:hover { background-color: var(--secondary-color); color: var(--bg-color); }
              .footer { text-align: center; margin-top: 3rem; font-size: 0.9rem; color: #888; }
              p > strong { color: #bbb; }
            </style>
          </head>
          <body>
            <div class="container">
              <div class="header">
                <h1>CoreAPI - Relatórios de Cobertura de Código</h1>
                <p>Visualize e acompanhe a cobertura de testes do projeto CoreAPI.</p>
              </div>
              <div class="tabs">
                <button class="tab-button active" onclick="openTab(event, 'latestTab')">Relatório Mais Recente</button>
                <button class="tab-button" onclick="openTab(event, 'historyTab')">Histórico</button>
              </div>
              <div id="latestTab" class="tab-content active"><div id="latest-report" class="card"><div class="card-body"><h2 class="card-title">Relatório Mais Recente</h2><div id="latest-info"></div><div class="buttons"><a id="latest-html-link" href="#" class="btn btn-primary">Ver Relatório HTML</a><a id="latest-xml-link" href="#" class="btn btn-outline-secondary">Ver XML</a></div></div></div></div>
              <div id="historyTab" class="tab-content"><h2>Histórico de Relatórios</h2><div id="reports-list"></div></div>
              <div class="footer"><p>Gerado por GitHub Actions em <span id="current-date"></span></p></div>
            </div>
            <script>
              document.getElementById('current-date').textContent = new Date().toLocaleDateString('pt-BR', { year: 'numeric', month: 'long', day: 'numeric', hour: '2-digit', minute: '2-digit' });
              function openTab(evt, tabName) {
                const tabContents = document.getElementsByClassName("tab-content");
                for (let i = 0; i < tabContents.length; i++) { tabContents[i].style.display = "none"; tabContents[i].classList.remove("active"); }
                const tabButtons = document.getElementsByClassName("tab-button");
                for (let i = 0; i < tabButtons.length; i++) { tabButtons[i].classList.remove("active"); }
                document.getElementById(tabName).style.display = "block"; document.getElementById(tabName).classList.add("active"); evt.currentTarget.classList.add("active");
              }
              document.addEventListener('DOMContentLoaded', () => document.querySelector('.tab-button').click());
            </script>
            <script src="./reports-data.js"></script>
          </body>
          </html>
          EOF
            cat > _site/reports-data.js << EOF
          const reportsData = [
          EOF
            find temp_coverage -name "metadata.json" | sort -r | while read -r metadata_file; do
              DIR_PATH=$(dirname "$metadata_file")
              REL_PATH=$(echo "$DIR_PATH" | sed 's|temp_coverage/||')
              BRANCH=$(jq -r '.branch' "$metadata_file")
              DATE=$(jq -r '.date' "$metadata_file")
              COMMIT=$(jq -r '.commit' "$metadata_file")
              echo "  {" >> _site/reports-data.js
              echo "    branch: \"$BRANCH\"," >> _site/reports-data.js
              echo "    date: \"$DATE\"," >> _site/reports-data.js
              echo "    commit: \"$COMMIT\"," >> _site/reports-data.js
              echo "    htmlPath: \"$REL_PATH/html/index.html\"," >> _site/reports-data.js
              echo "    xmlPath: \"$REL_PATH/coverage.cobertura.xml\"" >> _site/reports-data.js
              echo "  }," >> _site/reports-data.js
            done
            echo "];" >> _site/reports-data.js
            cat >> _site/reports-data.js << 'EOF'
          function formatDate(dateStr) {
            return new Date(dateStr).toLocaleDateString('pt-BR', { year: 'numeric', month: 'long', day: 'numeric', hour: '2-digit', minute: '2-digit' });
          }
          document.addEventListener('DOMContentLoaded', () => {
            if (reportsData.length > 0) {
              const latest = reportsData[0];
              document.getElementById('latest-info').innerHTML = \`<p><strong>Branch:</strong> \${latest.branch}</p><p><strong>Data:</strong> \${formatDate(latest.date)}</p><p><strong>Commit:</strong> \${latest.commit.substring(0, 7)}</p>\`;
              document.getElementById('latest-html-link').href = latest.htmlPath;
              document.getElementById('latest-xml-link').href = latest.xmlPath;
              const reportsListElement = document.getElementById('reports-list');
              reportsData.forEach(report => {
                const card = document.createElement('div');
                card.className = 'card';
                card.innerHTML = \`<div class="card-body"><h3 class="card-title">Branch: \${report.branch}</h3><p><strong>Data:</strong> \${formatDate(report.date)}</p><p><strong>Commit:</strong> \${report.commit.substring(0, 7)}</p><div class="buttons"><a href="\${report.htmlPath}" class="btn btn-primary">Ver Relatório HTML</a><a href="\${report.xmlPath}" class="btn btn-outline-secondary">Ver XML</a></div></div>\`;
                reportsListElement.appendChild(card);
              });
            }
          });
          EOF
            echo "Successfully generated coverage reports page."
          else
            echo "No coverage reports found."
            cat > _site/index.html << 'EOF'
          <!DOCTYPE html><html lang="pt-BR"><head><meta charset="UTF-8"><meta name="viewport" content="width=device-width, initial-scale=1.0"><title>CoreAPI - Relatórios de Cobertura de Código</title><style>body { font-family: sans-serif; background-color: #1a1a1a; color: #e0e0e0; display: flex; align-items: center; justify-content: center; height: 100vh; margin: 0; }.container { text-align: center; padding: 2rem; background-color: #2a2a2a; border-radius: 12px; }</style></head><body><div class="container"><h1>CoreAPI - Relatórios de Cobertura de Código</h1><p>Nenhum relatório de cobertura foi encontrado.</p></div></body></html>
          EOF
          fi

      - name: Upload Pages artifact
        uses: actions/upload-pages-artifact@v3

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
